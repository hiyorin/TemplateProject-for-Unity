//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MsgPack.Serialization.GeneratedSerializers {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MsgPack.Serialization.CodeDomSerializers.CodeDomSerializerBuilder", "1.0.0.0")]
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class DataSerializer : MsgPack.Serialization.MessagePackSerializer<Data> {
        
        private MsgPack.Serialization.MessagePackSerializer<float> _serializer0;
        
        private MsgPack.Serialization.MessagePackSerializer<int> _serializer1;
        
        private MsgPack.Serialization.MessagePackSerializer<string> _serializer2;
        
        private System.Collections.Generic.IList<System.Action<MsgPack.Packer, Data>> _packOperationList;
        
        private System.Collections.Generic.IDictionary<string, System.Action<MsgPack.Packer, Data>> _packOperationTable;
        
        private System.Collections.Generic.IDictionary<string, System.Func<Data, bool>> _nullCheckersTable;
        
        private System.Action<Data, float> this_SetUnpackedValueOfFloatDelegate;
        
        private System.Func<MsgPack.Unpacker, System.Type, string, float> MsgPack_Serialization_UnpackHelpers_UnpackSingleValueDelegate;
        
        private System.Action<Data, int> this_SetUnpackedValueOfIntegerDelegate;
        
        private System.Func<MsgPack.Unpacker, System.Type, string, int> MsgPack_Serialization_UnpackHelpers_UnpackInt32ValueDelegate;
        
        private System.Action<Data, string> this_SetUnpackedValueOfStringDelegate;
        
        private System.Func<MsgPack.Unpacker, System.Type, string, string> MsgPack_Serialization_UnpackHelpers_UnpackStringValueDelegate;
        
        private System.Collections.Generic.IList<string> _memberNames;
        
        private System.Collections.Generic.IList<System.Action<MsgPack.Unpacker, Data, int, int>> _unpackOperationList;
        
        private System.Collections.Generic.IDictionary<string, System.Action<MsgPack.Unpacker, Data, int, int>> _unpackOperationTable;
        
        public DataSerializer(MsgPack.Serialization.SerializationContext context) : 
                base(context, (MsgPack.Serialization.SerializerCapabilities.PackTo | MsgPack.Serialization.SerializerCapabilities.UnpackFrom)) {
            MsgPack.Serialization.PolymorphismSchema schema0 = default(MsgPack.Serialization.PolymorphismSchema);
            schema0 = null;
            this._serializer0 = context.GetSerializer<float>(schema0);
            MsgPack.Serialization.PolymorphismSchema schema1 = default(MsgPack.Serialization.PolymorphismSchema);
            schema1 = null;
            this._serializer1 = context.GetSerializer<int>(schema1);
            MsgPack.Serialization.PolymorphismSchema schema2 = default(MsgPack.Serialization.PolymorphismSchema);
            schema2 = null;
            this._serializer2 = context.GetSerializer<string>(schema2);
            System.Action<MsgPack.Packer, Data>[] packOperationList = default(System.Action<MsgPack.Packer, Data>[]);
            packOperationList = new System.Action<MsgPack.Packer, Data>[3];
            packOperationList[0] = new System.Action<MsgPack.Packer, Data>(this.PackValueOfFloat);
            packOperationList[1] = new System.Action<MsgPack.Packer, Data>(this.PackValueOfInteger);
            packOperationList[2] = new System.Action<MsgPack.Packer, Data>(this.PackValueOfString);
            this._packOperationList = packOperationList;
            System.Collections.Generic.Dictionary<string, System.Action<MsgPack.Packer, Data>> packOperationTable = default(System.Collections.Generic.Dictionary<string, System.Action<MsgPack.Packer, Data>>);
            packOperationTable = new System.Collections.Generic.Dictionary<string, System.Action<MsgPack.Packer, Data>>(3);
            packOperationTable["Float"] = new System.Action<MsgPack.Packer, Data>(this.PackValueOfFloat);
            packOperationTable["Integer"] = new System.Action<MsgPack.Packer, Data>(this.PackValueOfInteger);
            packOperationTable["String"] = new System.Action<MsgPack.Packer, Data>(this.PackValueOfString);
            this._packOperationTable = packOperationTable;
            System.Collections.Generic.Dictionary<string, System.Func<Data, bool>> nullCheckerTable = default(System.Collections.Generic.Dictionary<string, System.Func<Data, bool>>);
            nullCheckerTable = new System.Collections.Generic.Dictionary<string, System.Func<Data, bool>>(1);
            nullCheckerTable["String"] = new System.Func<Data, bool>(this.IsStringNull);
            this._nullCheckersTable = nullCheckerTable;
            System.Action<MsgPack.Unpacker, Data, int, int>[] unpackOperationList = default(System.Action<MsgPack.Unpacker, Data, int, int>[]);
            unpackOperationList = new System.Action<MsgPack.Unpacker, Data, int, int>[3];
            unpackOperationList[0] = new System.Action<MsgPack.Unpacker, Data, int, int>(this.UnpackValueOfFloat);
            unpackOperationList[1] = new System.Action<MsgPack.Unpacker, Data, int, int>(this.UnpackValueOfInteger);
            unpackOperationList[2] = new System.Action<MsgPack.Unpacker, Data, int, int>(this.UnpackValueOfString);
            this._unpackOperationList = unpackOperationList;
            System.Collections.Generic.Dictionary<string, System.Action<MsgPack.Unpacker, Data, int, int>> unpackOperationTable = default(System.Collections.Generic.Dictionary<string, System.Action<MsgPack.Unpacker, Data, int, int>>);
            unpackOperationTable = new System.Collections.Generic.Dictionary<string, System.Action<MsgPack.Unpacker, Data, int, int>>(3);
            unpackOperationTable["Float"] = new System.Action<MsgPack.Unpacker, Data, int, int>(this.UnpackValueOfFloat);
            unpackOperationTable["Integer"] = new System.Action<MsgPack.Unpacker, Data, int, int>(this.UnpackValueOfInteger);
            unpackOperationTable["String"] = new System.Action<MsgPack.Unpacker, Data, int, int>(this.UnpackValueOfString);
            this._unpackOperationTable = unpackOperationTable;
            this._memberNames = new string[] {
                    "Float",
                    "Integer",
                    "String"};
            this.this_SetUnpackedValueOfFloatDelegate = new System.Action<Data, float>(this.SetUnpackedValueOfFloat);
            this.MsgPack_Serialization_UnpackHelpers_UnpackSingleValueDelegate = new System.Func<MsgPack.Unpacker, System.Type, string, float>(MsgPack.Serialization.UnpackHelpers.UnpackSingleValue);
            this.this_SetUnpackedValueOfIntegerDelegate = new System.Action<Data, int>(this.SetUnpackedValueOfInteger);
            this.MsgPack_Serialization_UnpackHelpers_UnpackInt32ValueDelegate = new System.Func<MsgPack.Unpacker, System.Type, string, int>(MsgPack.Serialization.UnpackHelpers.UnpackInt32Value);
            this.this_SetUnpackedValueOfStringDelegate = new System.Action<Data, string>(this.SetUnpackedValueOfString);
            this.MsgPack_Serialization_UnpackHelpers_UnpackStringValueDelegate = new System.Func<MsgPack.Unpacker, System.Type, string, string>(MsgPack.Serialization.UnpackHelpers.UnpackStringValue);
        }
        
        private void PackValueOfFloat(MsgPack.Packer packer, Data objectTree) {
            this._serializer0.PackTo(packer, objectTree.Float);
        }
        
        private void PackValueOfInteger(MsgPack.Packer packer, Data objectTree) {
            this._serializer1.PackTo(packer, objectTree.Integer);
        }
        
        private void PackValueOfString(MsgPack.Packer packer, Data objectTree) {
            this._serializer2.PackTo(packer, objectTree.String);
        }
        
        private bool IsStringNull(Data objectTree) {
            return (objectTree.String == null);
        }
        
        protected override void PackToCore(MsgPack.Packer packer, Data objectTree) {
            MsgPack.Serialization.PackToArrayParameters<Data> packHelperParameters = default(MsgPack.Serialization.PackToArrayParameters<Data>);
            packHelperParameters.Packer = packer;
            packHelperParameters.Target = objectTree;
            packHelperParameters.Operations = this._packOperationList;
            MsgPack.Serialization.PackToMapParameters<Data> packHelperParameters0 = default(MsgPack.Serialization.PackToMapParameters<Data>);
            packHelperParameters0.Packer = packer;
            packHelperParameters0.Target = objectTree;
            packHelperParameters0.Operations = this._packOperationTable;
            packHelperParameters0.SerializationContext = this.OwnerContext;
            packHelperParameters0.NullCheckers = this._nullCheckersTable;
            if ((this.OwnerContext.SerializationMethod == MsgPack.Serialization.SerializationMethod.Array)) {
                MsgPack.Serialization.PackHelpers.PackToArray(ref packHelperParameters);
            }
            else {
                MsgPack.Serialization.PackHelpers.PackToMap(ref packHelperParameters0);
            }
        }
        
        private void SetUnpackedValueOfFloat(Data unpackingContext, float unpackedValue) {
            unpackingContext.Float = unpackedValue;
        }
        
        private void UnpackValueOfFloat(MsgPack.Unpacker unpacker, Data unpackingContext, int indexOfItem, int itemsCount) {
            MsgPack.Serialization.UnpackValueTypeValueParameters<Data, float> unpackHelperParameters = default(MsgPack.Serialization.UnpackValueTypeValueParameters<Data, float>);
            unpackHelperParameters.Unpacker = unpacker;
            unpackHelperParameters.UnpackingContext = unpackingContext;
            unpackHelperParameters.Serializer = this._serializer0;
            unpackHelperParameters.ItemsCount = itemsCount;
            unpackHelperParameters.Unpacked = indexOfItem;
            unpackHelperParameters.TargetObjectType = typeof(float);
            unpackHelperParameters.MemberName = "Float";
            unpackHelperParameters.DirectRead = this.MsgPack_Serialization_UnpackHelpers_UnpackSingleValueDelegate;
            unpackHelperParameters.Setter = this.this_SetUnpackedValueOfFloatDelegate;
            MsgPack.Serialization.UnpackHelpers.UnpackValueTypeValue(ref unpackHelperParameters);
        }
        
        private void SetUnpackedValueOfInteger(Data unpackingContext, int unpackedValue) {
            unpackingContext.Integer = unpackedValue;
        }
        
        private void UnpackValueOfInteger(MsgPack.Unpacker unpacker, Data unpackingContext, int indexOfItem, int itemsCount) {
            MsgPack.Serialization.UnpackValueTypeValueParameters<Data, int> unpackHelperParameters0 = default(MsgPack.Serialization.UnpackValueTypeValueParameters<Data, int>);
            unpackHelperParameters0.Unpacker = unpacker;
            unpackHelperParameters0.UnpackingContext = unpackingContext;
            unpackHelperParameters0.Serializer = this._serializer1;
            unpackHelperParameters0.ItemsCount = itemsCount;
            unpackHelperParameters0.Unpacked = indexOfItem;
            unpackHelperParameters0.TargetObjectType = typeof(int);
            unpackHelperParameters0.MemberName = "Integer";
            unpackHelperParameters0.DirectRead = this.MsgPack_Serialization_UnpackHelpers_UnpackInt32ValueDelegate;
            unpackHelperParameters0.Setter = this.this_SetUnpackedValueOfIntegerDelegate;
            MsgPack.Serialization.UnpackHelpers.UnpackValueTypeValue(ref unpackHelperParameters0);
        }
        
        private void SetUnpackedValueOfString(Data unpackingContext, string unpackedValue) {
            unpackingContext.String = unpackedValue;
        }
        
        private void UnpackValueOfString(MsgPack.Unpacker unpacker, Data unpackingContext, int indexOfItem, int itemsCount) {
            MsgPack.Serialization.UnpackReferenceTypeValueParameters<Data, string> unpackHelperParameters1 = default(MsgPack.Serialization.UnpackReferenceTypeValueParameters<Data, string>);
            unpackHelperParameters1.Unpacker = unpacker;
            unpackHelperParameters1.UnpackingContext = unpackingContext;
            unpackHelperParameters1.Serializer = this._serializer2;
            unpackHelperParameters1.ItemsCount = itemsCount;
            unpackHelperParameters1.Unpacked = indexOfItem;
            unpackHelperParameters1.TargetObjectType = typeof(string);
            unpackHelperParameters1.MemberName = "String";
            unpackHelperParameters1.NilImplication = MsgPack.Serialization.NilImplication.MemberDefault;
            unpackHelperParameters1.DirectRead = this.MsgPack_Serialization_UnpackHelpers_UnpackStringValueDelegate;
            unpackHelperParameters1.Setter = this.this_SetUnpackedValueOfStringDelegate;
            MsgPack.Serialization.UnpackHelpers.UnpackReferenceTypeValue(ref unpackHelperParameters1);
        }
        
        protected override Data UnpackFromCore(MsgPack.Unpacker unpacker) {
            Data result = default(Data);
            result = new Data();
            if (unpacker.IsArrayHeader) {
                return MsgPack.Serialization.UnpackHelpers.UnpackFromArray(unpacker, result, MsgPack.Serialization.UnpackHelpers.GetIdentity<Data>(), this._memberNames, this._unpackOperationList);
            }
            else {
                return MsgPack.Serialization.UnpackHelpers.UnpackFromMap(unpacker, result, MsgPack.Serialization.UnpackHelpers.GetIdentity<Data>(), this._unpackOperationTable);
            }
        }
    }
}

